# Generated by Django 4.1 on 2022-08-07 13:38

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import star_db.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.CharField(default='http://127.0.0.1:8000/media/avatar/default.png', max_length=100, verbose_name='头像')),
                ('phone', models.CharField(db_index=True, max_length=13, null=True, verbose_name='手机号')),
                ('sex', models.SmallIntegerField(default=1, verbose_name='性别')),
                ('id_num', models.CharField(max_length=20, null=True, verbose_name='证件号')),
                ('address', models.CharField(db_index=True, max_length=6, null=True, unique=True, verbose_name='住址')),
                ('parking', models.CharField(db_index=True, max_length=6, null=True, unique=True, verbose_name='车位')),
                ('check_in', models.DateField(max_length=10, null=True, verbose_name='入住时间')),
                ('status', models.SmallIntegerField(default=1, verbose_name='账号状态')),
                ('info_complete', models.BooleanField(default=False, verbose_name='信息完整')),
                ('task_id', models.CharField(default='', max_length=10, null=True, verbose_name='任务id')),
                ('payment_id', models.CharField(default='', max_length=30, null=True, verbose_name='待缴费项目')),
                ('login', models.SmallIntegerField(default=0, verbose_name='今日登录次数')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContentImg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_id', models.CharField(max_length=18, verbose_name='关联编号')),
                ('user_img', models.FileField(default='default.png', null=True, upload_to='avatar/', verbose_name='用户图片路径')),
                ('activity_img', models.FileField(default='default.png', null=True, upload_to='activity/', verbose_name='活动图片路径')),
                ('notice_img', models.FileField(default='default.png', null=True, upload_to='notice/', verbose_name='通知图片路径')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
            ],
            options={
                'db_table': 'content_img',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='费用名字')),
                ('status', models.BooleanField(default=1, verbose_name='收费状态')),
                ('type', models.CharField(max_length=5, verbose_name='收费类型')),
                ('money', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='收费金额')),
                ('unpaid_periods', models.SmallIntegerField(default=0, verbose_name='剩余期数')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='u_payment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payment',
            },
        ),
        migrations.CreateModel(
            name='UserService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='服务任务名')),
                ('type', models.CharField(default='', max_length=3, verbose_name='服务类型')),
                ('status', models.SmallIntegerField(default=0, verbose_name='服务状态')),
                ('score', models.FloatField(null=True, verbose_name='评价分数')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='u_service', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_service',
            },
        ),
        migrations.CreateModel(
            name='UserRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=200, null=True, verbose_name='备注')),
                ('content', models.CharField(max_length=300, null=True, verbose_name='发布通知内容')),
                ('comment', models.CharField(max_length=300, null=True, verbose_name='提交评论内容')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='u_user_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_record',
            },
        ),
        migrations.CreateModel(
            name='UserPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='收费金额')),
                ('score', models.FloatField(null=True, verbose_name='评价分数')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('order_id', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='p_user_payment', to='star_db.payment', verbose_name='收费单号')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='u_user_payment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_payment',
            },
        ),
        migrations.CreateModel(
            name='RepairsApply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='维修任务')),
                ('type', models.CharField(default='P3', max_length=3, verbose_name='维修类型')),
                ('status', models.SmallIntegerField(default=0, verbose_name='维修状态')),
                ('worker_name', models.CharField(max_length=4, null=True, verbose_name='维修师傅')),
                ('worker_id', models.IntegerField(null=True, verbose_name='师傅工号')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='u_repairs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'repairs_apply',
            },
        ),
        migrations.CreateModel(
            name='Publicity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField(default=0, verbose_name='通知类型')),
                ('name', models.CharField(max_length=10, verbose_name='通知标题')),
                ('img', models.CharField(max_length=100, verbose_name='通知图片')),
                ('address', models.CharField(max_length=30, verbose_name='活动地址')),
                ('money', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='收费金额')),
                ('start', models.DateField(max_length=19, verbose_name='开始时间')),
                ('end', models.DateField(max_length=19, verbose_name='截止时间')),
                ('join', models.SmallIntegerField(default=0, verbose_name='缴费人数')),
                ('need', models.SmallIntegerField(default=0, verbose_name='社区人数')),
                ('all', models.SmallIntegerField(default=0, verbose_name='社区人数')),
                ('good', models.SmallIntegerField(default=0, verbose_name='点赞数')),
                ('status', models.BooleanField(default=0, verbose_name='发布状态')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('删除对象'), related_name='u_publicity', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'publicity',
            },
        ),
        migrations.CreateModel(
            name='Parking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parking_lot_id', models.CharField(max_length=5, unique=True, verbose_name='车位号')),
                ('type', models.BooleanField(default=0, verbose_name='付款方式')),
                ('status', models.SmallIntegerField(default=0, verbose_name='车位状态')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('order_id', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='p_payment', to='star_db.payment', verbose_name='付款单号')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='user_parking', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'parking',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(default='', max_length=100, verbose_name='消息内容')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='n_notice', to=settings.AUTH_USER_MODEL, verbose_name='接收人')),
            ],
            options={
                'db_table': 'Message',
            },
        ),
        migrations.CreateModel(
            name='House',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('house_id', models.CharField(db_index=True, max_length=5, verbose_name='房屋号')),
                ('type', models.BooleanField(default=0, verbose_name='购买方式')),
                ('status', models.SmallIntegerField(default=0, verbose_name='房屋状态')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('order_id', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='h_payment', to='star_db.payment', verbose_name='付款单号')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='user_house', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'house',
            },
        ),
        migrations.CreateModel(
            name='Evaluate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='评价任务')),
                ('record_id', models.CharField(max_length=10, verbose_name='任务记录id')),
                ('type', models.BooleanField(default=0, verbose_name='评价类型')),
                ('score', models.FloatField(default=0.0, null=True, verbose_name='评价分数')),
                ('content', models.CharField(max_length=100, null=True, verbose_name='反馈内容')),
                ('status', models.BooleanField(default=0, verbose_name='任务状态')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='u_evaluate', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'evaluate',
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('replay_name', models.CharField(max_length=5, null=True, verbose_name='回复人姓名')),
                ('type', models.BooleanField(default=0, verbose_name='评论类型')),
                ('page_name', models.CharField(default='', max_length=30, verbose_name='来源页面名字')),
                ('page_id', models.CharField(default=0, max_length=10, verbose_name='来源页面id')),
                ('status', models.BooleanField(default=1, verbose_name='发布状态')),
                ('father_id', models.IntegerField(null=True, verbose_name='父评论id')),
                ('good', models.SmallIntegerField(default=0, verbose_name='评论数')),
                ('show', models.BooleanField(default=1, verbose_name='是否显示')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='u_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comments',
            },
        ),
        migrations.CreateModel(
            name='ActivityApply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration', models.SmallIntegerField(default=0, verbose_name='活动报名情况')),
                ('status', models.SmallIntegerField(default=0, verbose_name='申请状态')),
                ('create_time', models.DateField(auto_now_add=True, max_length=19, verbose_name='创建时间')),
                ('update_time', models.DateField(auto_now=True, max_length=19, verbose_name='更新时间')),
                ('publicity', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='a_publicity', to='star_db.publicity')),
                ('username', models.OneToOneField(db_constraint=False, on_delete=models.SET('待删除的对象'), related_name='a_activity', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'activity_apply',
            },
        ),
    ]
